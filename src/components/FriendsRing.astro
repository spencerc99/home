---
interface Friend {
  url: string;
  name: string;
  dimensions?: {
    width: number;
    height: number;
  };
}

function cleanUrl(url: string) {
  return url.replace(/http(s)?:\/\//, "").replace(/\/$/, "");
}

function randomColor() {
  // in rgb format
  return `rgba(${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, .4)`;
}

const friendsData: Friend[] =
  (await fetch(
    "https://raw.githubusercontent.com/spencerc99/poeticomp-friends/main/webring.json"
  )
    .then((c) => c.json())
    .catch((err) => console.error(err))) || [];
---

<div id="friends">
  {
    friendsData.map((friend) => {
      return (
        <div class="friend" style={`--shadow-color: ${randomColor()}`}>
          <a class="noanchor" href={friend.url}>
            <img
              src={`https://www.google.com/s2/favicons?domain=${encodeURIComponent(cleanUrl(friend.url))}&sz=128`}
              alt={`the favicon for ${friend.name}'s site at ${friend.url}`}
              style="width:100%; height: 100%; border-radius: 50%;"
            />
          </a>
        </div>
      );
    })
  }
</div>

<style lang="scss">
  @mixin distribute-in-circle($circle-diameter, $child-size, $count) {
    $radius: $circle-diameter / 2;
    $container-center: $radius;
    $child-center: $child-size / 2;

    // Parent container styling
    position: relative;
    width: $circle-diameter;
    height: $circle-diameter;

    // Child elements styling
    & > * {
      position: absolute;
      width: $child-size;
      height: $child-size;
      // Set transform origin at the center of the child element
      transform-origin: 50% 50%;
      // Calculate child's center position
      margin-top: -($child-center);
      margin-left: -($child-center);
      border-radius: 50%;

      // TODO: for shared shadow
      // &:nth-of-type(3n + 2) {
      //     // fades in and out
      //     box-shadow: var(--shadow-color) 0px 0px 20px 5px;
      // }

      // Position each child
      @for $i from 1 through $count {
        // Angle for the child element
        $angle: (360deg / $count) * ($i - 1);
        // Position calculation
        $x: $container-center + $radius * cos($angle) - $child-center;
        $y: $container-center + $radius * sin($angle) - $child-center;
        // counteract the spinning from below
        animation: reverse-spin 45s linear infinite;

        &:nth-child(#{$i}) {
          left: $x;
          top: $y;
        }
      }
    }
  }

  #friends {
    @include distribute-in-circle(7em, 2em, 13);
    animation: spin 45s linear infinite;

    a {
      text-decoration: none;
    }
  }

  @keyframes spin {
    100% {
      transform: rotate(360deg);
    }
  }

  @keyframes reverse-spin {
    100% {
      transform: rotate(-360deg);
    }
  }
</style>
