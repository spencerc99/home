---
import { Footnote } from "../components/Footnote";
import fitsData from "../data/fits.json";
import Status from "../components/Status.astro";
import { FitsCarousel } from "../components/views/FitsCarousel";
import DetailLayout from "../layouts/DetailLayout.astro";
import { FeedCard } from "../components/FeedCard";
import type { Fit } from "../components/views/Fits";
import "../styles/feed.scss";
import { getCollection } from "astro:content";
import { CreationsCarousel } from "../components/views/Carousels";
import type { CollectionEntry } from "astro:content";
import { CreationCategory } from "../utils/creations";
import { CreationsView } from "../components/views/CreationsView";

const LayoutProps = {
  title: "(everything)",
  date: "2024-12-28",
  metaTitle: "feed",
  emojis: [],
  titleClass: "uniform",
};

const sortedFits = (fitsData.fits as Fit[]).sort(
  (a, b) => b.timestamp - a.timestamp
);
const posts = ((await getCollection("posts")) || [])
  .filter((post) => !post.data.hidden && !post.data.draft)
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

const creations = await getCollection("creation");

const sortedCreations = creations
  .filter((c) => Boolean(c.data.parentCategory))
  .sort((a, b) => {
    // if both are forthcoming, sort by date ascending
    // otherwise if one is forthcoming, it comes first
    // otherwise, sort by date descending
    if (a.data.forthcoming && b.data.forthcoming) {
      return a.data.date.valueOf() - b.data.date.valueOf();
    }
    if (a.data.forthcoming || b.data.forthcoming) {
      return a.data.forthcoming ? -1 : 1;
    }
    return b.data.date.valueOf() - a.data.date.valueOf();
  });

const groupedCreations = sortedCreations.reduce((acc, creation) => {
  const category = creation.data.parentCategory;
  if (!acc[category]) {
    acc[category] = creation;
  }
  return acc;
}, {}) as Record<string, CollectionEntry<"creation">>;

const latestCreations = groupedCreations;

if (
  latestCreations["Writing"] &&
  latestCreations["Writing"].data.date.getTime() <
    posts[0].data.pubDate.valueOf()
) {
  latestCreations["Writing"] = posts[0];
}

const finalCreations = Object.values(latestCreations).sort((a, b) => {
  const aCategory = a.data.parentCategory || "Writing";
  const bCategory = b.data.parentCategory || "Writing";
  return CreationCategory[aCategory] - CreationCategory[bCategory];
});
---

<DetailLayout {...LayoutProps} columns={1}>
  <div class="gridContainer">
    <!-- post -->
    <!-- <FeedCard title="WRITING" icon="ðŸ“°" client:only="react"> -->
    <!-- <PostsCarousel posts={sortedPosts} client:only="react" /> -->
    <!-- </FeedCard> -->
    <!-- <FeedCard
      title="CREATIONS"
      icon="ðŸª„"
      client:only="react"
      allLink="/creation"
    >
      <CreationsCarousel creations={sortedCreations} client:only="react" />
    </FeedCard> -->
    <!-- creation -->
    <!-- experiments -->

    <!-- <FeedCard title="PRESS" icon="ðŸ“°" allLink="/press" client:only="react">
      <PressCarousel press={press} client:only="react" />
    </FeedCard> -->

    <!-- <FeedCard title="FITS" icon="ðŸ‘”" allLink="/fits" client:only="react">
      <FitsCarousel fits={sortedFits} client:only="react" />
    </FeedCard> -->
    <!-- <Status /> -->
    <!-- Location -->
    <!-- social media posts across bluesky, instagram, twitter? -->
    <!-- last video? -->
  </div>
  <!-- NOTE: this has to be a constant and not ViewType.GRID, idk why but it breaks otherwise -->
  <!-- @ts-ignore -->
  <CreationsView
    creations={sortedCreations}
    client:only="react"
    columns={1}
    defaultView={"list"}
  />
</DetailLayout>
