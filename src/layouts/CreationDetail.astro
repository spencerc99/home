---
import type { CollectionEntry } from "astro:content";
import FormattedDate from "../components/FormattedDate.astro";
import { marked } from "marked";
import { CreationDetailImages } from "../components/CreationDetailImages";
import { withQueryParams } from "../utils/url";
import { RelatedCreations } from "../components/RelatedCreations";

import "./CreationDetail.scss";
import BaseLayout from "./BaseLayout.astro";
import { ImageOrVideo } from "../components/ImageOrVideo";
import { stringToColor } from "../utils";

type Props = CollectionEntry<"collection">["data"] & {
  relatedCreations?: Array<
    CollectionEntry<"creation">["data"] & { id: string }
  >;
};

const {
  title,
  descriptionMd,
  date,
  subtext,
  heroImage,
  media,
  link,
  shouldIframe,
  movieUrl,
  movieEmbed,
  materials,
  imageDescriptions,
  mediaMetadata,
  relatedCreations = [],
} = Astro.props;
const descriptionParsed = descriptionMd
  ? marked.parse(
      // Convert any single \n that isn't preceded by two spaces into \n\n
      descriptionMd.replace(/(?<!  )\n/g, "\n\n"),
      {
        breaks: true,
        gfm: true,
      }
    )
  : "";

const transformedMovieUrl = movieUrl
  ? withQueryParams(
      movieUrl.replace("https://codahosted.io", "https://codaio.imgix.net"),
      {
        auto: "format,compress",
        fit: "max",
        w: "1200",
        h: "650",
      }
    )
  : movieUrl;
const transformedHeroImage = heroImage
  ? withQueryParams(
      heroImage.replace("https://codahosted.io", "https://codaio.imgix.net"),
      {
        auto: "format,compress",
        fit: "max",
        w: "1200",
        h: "650",
      }
    )
  : heroImage;
const mediaTransformed = media.map((item) => {
  return withQueryParams(
    item.replace("https://codahosted.io", "https://codaio.imgix.net"),
    {
      auto: "format,compress",
      fit: "max",
      w: "1000",
    }
  );
});

const style = {
  "--aura-color": stringToColor(title),
  "--aura-color-transparent": stringToColor(title, {
    alpha: 0.3,
  }),
};
---

<BaseLayout title={title} description={subtext} image={heroImage}>
  <main class="creationDetail">
    <article>
      <div class="content">
        <div class="prose">
          <div class="header">
            {
              date ? (
                <div class="date">
                  <FormattedDate date={date} />
                </div>
              ) : null
            }
            <h2>
              {link ? <a href={link}>{title}</a> : title}
            </h2>
            <i>{subtext}</i>
            {materials && <i class="meta">Materials: {materials}</i>}
          </div>
          <div class="main">
            <div class="hero-container-mobile">
              {
                shouldIframe ? (
                  <div class="iframeWrapper">
                    <iframe src={link} />
                    <div>
                      window into <a href={link}>{link}</a>
                    </div>
                  </div>
                ) : movieEmbed ? (
                  <iframe class="movieEmbed" src={movieEmbed} />
                ) : (
                  <div class="hero-image" style={style}>
                    {movieUrl ? (
                      <video controls autoplay loop>
                        <source src={transformedMovieUrl} type="video/webm" />
                      </video>
                    ) : (
                      <>
                        <ImageOrVideo
                          client:only="react"
                          src={transformedHeroImage}
                          type={mediaMetadata?.[0]}
                        />
                        {imageDescriptions?.[0] && (
                          <span class="descriptionText">
                            {imageDescriptions[0]}
                          </span>
                        )}
                      </>
                    )}
                  </div>
                )
              }
            </div>
            {
              descriptionParsed && (
                <p class="main-description" set:html={descriptionParsed} />
              )
            }
            <slot />
            {
              relatedCreations.length > 0 && (
                <div class="desktop-related">
                  <RelatedCreations
                    client:only="react"
                    creations={relatedCreations}
                  />
                </div>
              )
            }
          </div>
        </div>
        <div>
          <div class="hero-container-desktop" style={style}>
            {
              shouldIframe ? (
                <div class="iframeWrapper">
                  <iframe src={link} />
                  <div>
                    window into <a href={link}>{link}</a>
                  </div>
                </div>
              ) : movieEmbed ? (
                <iframe class="movieEmbed" src={movieEmbed} />
              ) : (
                <div class="hero-image">
                  {movieUrl ? (
                    <video controls autoplay loop>
                      <source src={transformedMovieUrl} type="video/webm" />
                    </video>
                  ) : (
                    <>
                      <ImageOrVideo
                        client:only="react"
                        src={transformedHeroImage}
                        type={mediaMetadata?.[0]}
                      />
                      {imageDescriptions?.[0] && (
                        <span class="descriptionText">
                          {imageDescriptions[0]}
                        </span>
                      )}
                    </>
                  )}
                </div>
              )
            }
          </div>
          <CreationDetailImages
            images={mediaTransformed.slice(movieUrl ? 0 : 1, media.length)}
            descriptions={imageDescriptions
              ? imageDescriptions.slice(movieUrl ? 0 : 1)
              : []}
            client:only="react"
            metadata={mediaMetadata?.slice(movieUrl ? 0 : 1)}
          />
          {
            relatedCreations.length > 0 && (
              <div class="mobile-related">
                <RelatedCreations
                  client:only="react"
                  creations={relatedCreations}
                />
              </div>
            )
          }
        </div>
      </div>
    </article>
  </main>
  <script src="https://player.vimeo.com/api/player.js"></script>
</BaseLayout>
